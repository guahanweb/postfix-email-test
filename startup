#!/usr/bin/env bash
export DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" > /dev/null 2>&1 && pwd )"
export PROJECT_ROOT="${DIR}"

# load additional files, if available
[[ -f ~/.bashrc ]] && source ~/.bashrc
[[ -f ${DIR}/scripts/settings.sh ]] && source ${DIR}/scripts/settings.sh
[[ -f ${DIR}/scripts/utils.sh ]] && source ${DIR}/scripts/utils.sh

if [ "$#" -gt 0 ]
then
    CMD=${1}
    shift

    case "${CMD}" in
        build )
            build_image
            ;;

        start-postfix )
            require_image
            start_postfix
            ;;

        stop-postfix )
            if [ $( docker ps -f "name=${CONTAINER_NAME}" | grep "${DOCKER_TAG}" | wc -l ) -gt 0 ]
            then
                # container is running, so stop it
                stop_postfix
            else
                info "no ${BOLD_WHITE}${DOCKER_TAG}${NC} container running"
                ok "nothing to do"
            fi
            ;;

        cleanup )
            if [[ -z "$(docker images -q ${DOCKER_TAG})" ]]
            then
                info "image ${BOLD_WHITE}${DOCKER_TAG}${NC} does not exist"
                ok "nothing to do"
            else
                info "deleteing ${BOLD_WHITE}${DOCKER_TAG}${NC} image"
                docker rmi ${DOCKER_TAG} > /dev/null 2>&1
                ok "done"
            fi
            ;;

        run-tests )
            require_image
            run_tests
            ;;

        * )
            # unknown command
            ;;
    esac
else
    # default behavior, since no command provided
    warn "no command provided"
fi
